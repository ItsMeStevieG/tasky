{% extends 'base.twig' %}

{% block title %}Profile - Tasky{% endblock %}

{% block content %}
<div class="card">
    <div class="card-header">Your Profile</div>
    <div class="card-body">
        <form method="POST" action="index.php?nav=profile" enctype="multipart/form-data" id="profileForm">
            <input type="hidden" name="csrf_token" value="{{ auth.getCsrfToken() }}">
            <input type="hidden" name="action" value="update_profile">
            <input type="hidden" name="cropped_image" id="croppedImage">
            <div class="mb-3">
                <label for="full_name" class="form-label">Full Name</label>
                <input type="text" class="form-control" id="full_name" name="full_name" value="{{ full_name }}" required>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">New Password (leave blank to keep current)</label>
                <input type="password" class="form-control" id="password" name="password">
            </div>
            <div class="mb-3">
                <label for="profile_picture" class="form-label">Profile Picture</label>
                <input type="file" class="form-control" id="profile_picture" name="profile_picture" accept="image/*">
                {% if auth.getProfilePicture %}
                <div class="mt-2">
                    <img src="{{ auth.getProfilePicture }}" alt="Current Profile Picture" class="rounded-circle profile-picture">
                </div>
                {% endif %}
            </div>
            <button type="submit" class="btn btn-primary">Update Profile</button>
        </form>
    </div>
</div>

<!-- Crop Modal -->
<div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropModalLabel">Crop Profile Picture</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <img id="imageToCrop" src="" alt="Image to Crop">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="cropButton">Crop and Save</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block footscripts %}
<script>
    // Theme toggle logic
    const themeToggle = document.getElementById('themeToggle');
    const themeIcon = document.getElementById('themeIcon');
    const html = document.documentElement;
    let theme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');

    // Set initial theme and icon
    html.setAttribute('data-theme', theme);
    themeIcon.className = theme === 'light' ? 'bi bi-sun-fill' : 'bi bi-moon-fill';

    // Toggle theme
    themeToggle.addEventListener('click', () => {
        theme = theme === 'light' ? 'dark' : 'light';
        html.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
        themeIcon.className = theme === 'light' ? 'bi bi-sun-fill' : 'bi bi-moon-fill';
    });

    // Cropper.js logic
    const imageInput = document.getElementById('profile_picture');
    const imageToCrop = document.getElementById('imageToCrop');
    const cropButton = document.getElementById('cropButton');
    const croppedImageInput = document.getElementById('croppedImage');
    let cropper;

    imageInput.addEventListener('change', (e) => {
        const files = e.target.files;
        if (files && files.length > 0) {
            const reader = new FileReader();
            reader.onload = (event) => {
                imageToCrop.src = event.target.result;
                const modal = new bootstrap.Modal(document.getElementById('cropModal'));
                modal.show();

                // Initialize Cropper.js
                if (cropper) {
                    cropper.destroy();
                }
                cropper = new Cropper(imageToCrop, {
                    aspectRatio: 1,
                    viewMode: 1,
                    autoCropArea: 0.8,
                    responsive: true,
                    zoomable: true,
                    scalable: true,
                    movable: true,
                });
            };
            reader.readAsDataURL(files[0]);
        }
    });

    cropButton.addEventListener('click', () => {
        if (cropper) {
            const canvas = cropper.getCroppedCanvas({
                width: 200,
                height: 200,
            });
            canvas.toBlob((blob) => {
                const reader = new FileReader();
                reader.onloadend = () => {
                    croppedImageInput.value = reader.result;
                    const modal = bootstrap.Modal.getInstance(document.getElementById('cropModal'));
                    modal.hide();
                    // Reset the file input to allow re-uploading
                    imageInput.value = '';
                };
                reader.readAsDataURL(blob);
            }, 'image/jpeg');
        }
    });

    // Clean up Cropper.js when modal is closed
    document.getElementById('cropModal').addEventListener('hidden.bs.modal', () => {
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
        imageToCrop.src = '';
    });
</script>
{% endblock %}